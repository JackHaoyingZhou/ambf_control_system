// Generated by gencpp from file rbdl_server/RBDLModelRequest.msg
// DO NOT EDIT!


#ifndef RBDL_SERVER_MESSAGE_RBDLMODELREQUEST_H
#define RBDL_SERVER_MESSAGE_RBDLMODELREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rbdl_server
{
template <class ContainerAllocator>
struct RBDLModelRequest_
{
  typedef RBDLModelRequest_<ContainerAllocator> Type;

  RBDLModelRequest_()
    : model()  {
    }
  RBDLModelRequest_(const ContainerAllocator& _alloc)
    : model(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_type;
  _model_type model;





  typedef boost::shared_ptr< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RBDLModelRequest_

typedef ::rbdl_server::RBDLModelRequest_<std::allocator<void> > RBDLModelRequest;

typedef boost::shared_ptr< ::rbdl_server::RBDLModelRequest > RBDLModelRequestPtr;
typedef boost::shared_ptr< ::rbdl_server::RBDLModelRequest const> RBDLModelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rbdl_server::RBDLModelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rbdl_server::RBDLModelRequest_<ContainerAllocator1> & lhs, const ::rbdl_server::RBDLModelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.model == rhs.model;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rbdl_server::RBDLModelRequest_<ContainerAllocator1> & lhs, const ::rbdl_server::RBDLModelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rbdl_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0147e4f36cba5cda7fa39c089e493413";
  }

  static const char* value(const ::rbdl_server::RBDLModelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0147e4f36cba5cdaULL;
  static const uint64_t static_value2 = 0x7fa39c089e493413ULL;
};

template<class ContainerAllocator>
struct DataType< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rbdl_server/RBDLModelRequest";
  }

  static const char* value(const ::rbdl_server::RBDLModelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model\n"
;
  }

  static const char* value(const ::rbdl_server::RBDLModelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RBDLModelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rbdl_server::RBDLModelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rbdl_server::RBDLModelRequest_<ContainerAllocator>& v)
  {
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RBDL_SERVER_MESSAGE_RBDLMODELREQUEST_H
