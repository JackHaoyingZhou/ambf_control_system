// Generated by gencpp from file rbdl_server/RBDLJacobianRequest.msg
// DO NOT EDIT!


#ifndef RBDL_SERVER_MESSAGE_RBDLJACOBIANREQUEST_H
#define RBDL_SERVER_MESSAGE_RBDLJACOBIANREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace rbdl_server
{
template <class ContainerAllocator>
struct RBDLJacobianRequest_
{
  typedef RBDLJacobianRequest_<ContainerAllocator> Type;

  RBDLJacobianRequest_()
    : body_name()
    , q()
    , point()  {
    }
  RBDLJacobianRequest_(const ContainerAllocator& _alloc)
    : body_name(_alloc)
    , q(_alloc)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _body_name_type;
  _body_name_type body_name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_type;
  _q_type q;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RBDLJacobianRequest_

typedef ::rbdl_server::RBDLJacobianRequest_<std::allocator<void> > RBDLJacobianRequest;

typedef boost::shared_ptr< ::rbdl_server::RBDLJacobianRequest > RBDLJacobianRequestPtr;
typedef boost::shared_ptr< ::rbdl_server::RBDLJacobianRequest const> RBDLJacobianRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator1> & lhs, const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator2> & rhs)
{
  return lhs.body_name == rhs.body_name &&
    lhs.q == rhs.q &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator1> & lhs, const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rbdl_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c044abd2a124ba484feaebd59aff30cd";
  }

  static const char* value(const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc044abd2a124ba48ULL;
  static const uint64_t static_value2 = 0x4feaebd59aff30cdULL;
};

template<class ContainerAllocator>
struct DataType< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rbdl_server/RBDLJacobianRequest";
  }

  static const char* value(const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string body_name\n"
"float64[] q\n"
"geometry_msgs/Point point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.body_name);
      stream.next(m.q);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RBDLJacobianRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rbdl_server::RBDLJacobianRequest_<ContainerAllocator>& v)
  {
    s << indent << "body_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.body_name);
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RBDL_SERVER_MESSAGE_RBDLJACOBIANREQUEST_H
