// Generated by gencpp from file controller_modules/JointControlResponse.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MODULES_MESSAGE_JOINTCONTROLRESPONSE_H
#define CONTROLLER_MODULES_MESSAGE_JOINTCONTROLRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectoryPoint.h>

namespace controller_modules
{
template <class ContainerAllocator>
struct JointControlResponse_
{
  typedef JointControlResponse_<ContainerAllocator> Type;

  JointControlResponse_()
    : control_output()  {
    }
  JointControlResponse_(const ContainerAllocator& _alloc)
    : control_output(_alloc)  {
  (void)_alloc;
    }



   typedef  ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  _control_output_type;
  _control_output_type control_output;





  typedef boost::shared_ptr< ::controller_modules::JointControlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_modules::JointControlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct JointControlResponse_

typedef ::controller_modules::JointControlResponse_<std::allocator<void> > JointControlResponse;

typedef boost::shared_ptr< ::controller_modules::JointControlResponse > JointControlResponsePtr;
typedef boost::shared_ptr< ::controller_modules::JointControlResponse const> JointControlResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller_modules::JointControlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller_modules::JointControlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace controller_modules

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'trajectory_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::controller_modules::JointControlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller_modules::JointControlResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_modules::JointControlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_modules::JointControlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_modules::JointControlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_modules::JointControlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller_modules::JointControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ec3ebfca49414b25763484f58b5180b";
  }

  static const char* value(const ::controller_modules::JointControlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ec3ebfca49414b2ULL;
  static const uint64_t static_value2 = 0x5763484f58b5180bULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_modules::JointControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_modules/JointControlResponse";
  }

  static const char* value(const ::controller_modules::JointControlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller_modules::JointControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_msgs/JointTrajectoryPoint control_output\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::controller_modules::JointControlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller_modules::JointControlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointControlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller_modules::JointControlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller_modules::JointControlResponse_<ContainerAllocator>& v)
  {
    s << indent << "control_output: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.control_output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MODULES_MESSAGE_JOINTCONTROLRESPONSE_H
