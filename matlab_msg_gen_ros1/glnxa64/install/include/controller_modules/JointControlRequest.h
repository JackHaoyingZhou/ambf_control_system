// Generated by gencpp from file controller_modules/JointControlRequest.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MODULES_MESSAGE_JOINTCONTROLREQUEST_H
#define CONTROLLER_MODULES_MESSAGE_JOINTCONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <trajectory_msgs/JointTrajectoryPoint.h>
#include <trajectory_msgs/JointTrajectoryPoint.h>

namespace controller_modules
{
template <class ContainerAllocator>
struct JointControlRequest_
{
  typedef JointControlRequest_<ContainerAllocator> Type;

  JointControlRequest_()
    : header()
    , joint_names()
    , controller_name()
    , desired()
    , actual()  {
    }
  JointControlRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , controller_name(_alloc)
    , desired(_alloc)
    , actual(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _controller_name_type;
  _controller_name_type controller_name;

   typedef  ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  _desired_type;
  _desired_type desired;

   typedef  ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  _actual_type;
  _actual_type actual;





  typedef boost::shared_ptr< ::controller_modules::JointControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_modules::JointControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct JointControlRequest_

typedef ::controller_modules::JointControlRequest_<std::allocator<void> > JointControlRequest;

typedef boost::shared_ptr< ::controller_modules::JointControlRequest > JointControlRequestPtr;
typedef boost::shared_ptr< ::controller_modules::JointControlRequest const> JointControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller_modules::JointControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller_modules::JointControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace controller_modules

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'trajectory_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::controller_modules::JointControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller_modules::JointControlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_modules::JointControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_modules::JointControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_modules::JointControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_modules::JointControlRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller_modules::JointControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec0f8ccf443b2f5f131ee015d59e16d2";
  }

  static const char* value(const ::controller_modules::JointControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec0f8ccf443b2f5fULL;
  static const uint64_t static_value2 = 0x131ee015d59e16d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_modules::JointControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_modules/JointControlRequest";
  }

  static const char* value(const ::controller_modules::JointControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller_modules::JointControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string[] joint_names\n"
"string controller_name\n"
"trajectory_msgs/JointTrajectoryPoint desired\n"
"trajectory_msgs/JointTrajectoryPoint actual\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::controller_modules::JointControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller_modules::JointControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.controller_name);
      stream.next(m.desired);
      stream.next(m.actual);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller_modules::JointControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller_modules::JointControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "controller_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.controller_name);
    s << indent << "desired: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.desired);
    s << indent << "actual: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.actual);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MODULES_MESSAGE_JOINTCONTROLREQUEST_H
