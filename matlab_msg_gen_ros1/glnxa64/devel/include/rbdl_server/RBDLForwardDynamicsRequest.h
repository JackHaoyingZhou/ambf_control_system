// Generated by gencpp from file rbdl_server/RBDLForwardDynamicsRequest.msg
// DO NOT EDIT!


#ifndef RBDL_SERVER_MESSAGE_RBDLFORWARDDYNAMICSREQUEST_H
#define RBDL_SERVER_MESSAGE_RBDLFORWARDDYNAMICSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rbdl_server
{
template <class ContainerAllocator>
struct RBDLForwardDynamicsRequest_
{
  typedef RBDLForwardDynamicsRequest_<ContainerAllocator> Type;

  RBDLForwardDynamicsRequest_()
    : model_name()
    , q()
    , qd()
    , tau()  {
    }
  RBDLForwardDynamicsRequest_(const ContainerAllocator& _alloc)
    : model_name(_alloc)
    , q(_alloc)
    , qd(_alloc)
    , tau(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_type;
  _q_type q;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qd_type;
  _qd_type qd;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tau_type;
  _tau_type tau;





  typedef boost::shared_ptr< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RBDLForwardDynamicsRequest_

typedef ::rbdl_server::RBDLForwardDynamicsRequest_<std::allocator<void> > RBDLForwardDynamicsRequest;

typedef boost::shared_ptr< ::rbdl_server::RBDLForwardDynamicsRequest > RBDLForwardDynamicsRequestPtr;
typedef boost::shared_ptr< ::rbdl_server::RBDLForwardDynamicsRequest const> RBDLForwardDynamicsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rbdl_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f127ad30f28d40445e1e732a1f350582";
  }

  static const char* value(const ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf127ad30f28d4044ULL;
  static const uint64_t static_value2 = 0x5e1e732a1f350582ULL;
};

template<class ContainerAllocator>
struct DataType< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rbdl_server/RBDLForwardDynamicsRequest";
  }

  static const char* value(const ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model_name\n"
"float64[] q\n"
"float64[] qd\n"
"float64[] tau\n"
;
  }

  static const char* value(const ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_name);
      stream.next(m.q);
      stream.next(m.qd);
      stream.next(m.tau);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RBDLForwardDynamicsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rbdl_server::RBDLForwardDynamicsRequest_<ContainerAllocator>& v)
  {
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "qd[]" << std::endl;
    for (size_t i = 0; i < v.qd.size(); ++i)
    {
      s << indent << "  qd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qd[i]);
    }
    s << indent << "tau[]" << std::endl;
    for (size_t i = 0; i < v.tau.size(); ++i)
    {
      s << indent << "  tau[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RBDL_SERVER_MESSAGE_RBDLFORWARDDYNAMICSREQUEST_H
