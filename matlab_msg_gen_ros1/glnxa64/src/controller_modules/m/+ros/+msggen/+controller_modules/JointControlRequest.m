
classdef JointControlRequest < ros.Message
    %JointControlRequest MATLAB implementation of controller_modules/JointControlRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'controller_modules/JointControlRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ec0f8ccf443b2f5f131ee015d59e16d2' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Desired' 'Actual' 'JointNames' 'ControllerName' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'desired' 'actual' 'joint_names' 'controller_name' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.trajectory_msgs.JointTrajectoryPoint' ...
            'ros.msggen.trajectory_msgs.JointTrajectoryPoint' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Desired
        Actual
        JointNames
        ControllerName
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'JointControlRequest', 'Header')
            obj.Header = val;
        end
        function set.Desired(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.trajectory_msgs.JointTrajectoryPoint'};
            validateattributes(val, validClasses, validAttributes, 'JointControlRequest', 'Desired')
            obj.Desired = val;
        end
        function set.Actual(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.trajectory_msgs.JointTrajectoryPoint'};
            validateattributes(val, validClasses, validAttributes, 'JointControlRequest', 'Actual')
            obj.Actual = val;
        end
        function set.JointNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointControlRequest', 'JointNames');
            obj.JointNames = cell(val);
        end
        function set.ControllerName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'JointControlRequest', 'ControllerName');
            obj.ControllerName = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.controller_modules.JointControlRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.controller_modules.JointControlRequest(strObj);
        end
    end
end
